plugins {
    id 'java'
    id 'jacoco'
}

group = 'org.design.patterns'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.inject:guice:7.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'

}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.11"
}

ext.jacocoExcludes = [
        'org/workflow/manager/annotations/**',
        'org/workflow/manager/constants/**',
        'org/workflow/manager/contexts/**',
        'org/workflow/manager/exceptions/**',
        'org/workflow/manager/models/**',
        'org/workflow/manager/tools/**',
        'org/workflow/manager/responses/**',
        'org/workflow/manager/workflow_nodes/**',
        'org/workflow/manager/workflow_operations/**',
]

tasks.withType(Test).configureEach {
    jacoco {
        excludes = jacocoExcludes
    }

    doLast {
        println("Excluded packages for Jacoco tests : ")
        jacoco.excludes.forEach {println(it)}
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.destination file("${buildDir}/jacocoReportDir")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    doLast {
        println "You can check Jacoco Reports: ${buildDir}/jacocoReportDir/index.html"
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }

    dependsOn(jacocoTestReport)
}

build.finalizedBy jacocoTestCoverageVerification
